from passlib.context import CryptContext

pwd_context = CryptContext(schemas = ["bcrypt"],deprecated="auto")

def hash_password(plain_password:str) -> str:
    return pwd_context.hash(plain_password)

def verify_password(plain_password:str, hashed_password:str) -> bool:
    return pwd_context.verify(plain_password,hashed_password)

def verify_token(token:str) -> dict:
    return jwt.decode(token,SECRET_KEY,algorithms=ALGORITHM)

from jose import JWTError, jwt
from datetime import datetime, timedelta

SECRET_KEY = "this_is_super_secret"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30 # 토큰 유효 시간
REFRESH_TOKEN_EXPIRE_DAYS = 14 #access 토큰의 유효기간

def create_access_token(data:dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp":expire})
    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,algorithm=ALGORITHM)
    return encoded_jwt

def create_refresh_token(data:dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode,SECRET_KEY,algorithm=ALGORITHM)
    return encoded_jwt
